<?php function easywp_plugin_exists(){$plugin_dir=defined(\'WPMU_PLUGIN_DIR\')?WPMU_PLUGIN_DIR:WP_CONTENT_DIR.\'/mu-plugins\';return file_exists($plugin_dir.\'/wp-nc-easywp/plugin/Http/Redis/includes/predis.php\');}if((!defined(\'WP_REDIS_DISABLED\')||!WP_REDIS_DISABLED)&&easywp_plugin_exists()):function wp_cache_add($key,$value,$group=\'\',$expiration=0){global $wp_object_cache;return $wp_object_cache->add($key,$value,$group,$expiration);}function wp_cache_close(){return true;}function wp_cache_decr($key,$offset=1,$group=\'\'){global $wp_object_cache;return $wp_object_cache->decrement($key,$offset,$group);}function wp_cache_delete($key,$group=\'\',$time=0){global $wp_object_cache;return $wp_object_cache->delete($key,$group,$time);}function wp_cache_flush($delay=0){global $wp_object_cache;return $wp_object_cache->flush($delay);}function wp_cache_get($key,$group=\'\',$force=false,&$found=null){global $wp_object_cache;return $wp_object_cache->get($key,$group,$force,$found);}function wp_cache_get_multi($groups){global $wp_object_cache;return $wp_object_cache->get_multi($groups);}function wp_cache_incr($key,$offset=1,$group=\'\'){global $wp_object_cache;return $wp_object_cache->increment($key,$offset,$group);}function wp_cache_init(){global $wp_object_cache;if(!($wp_object_cache instanceof WP_Object_Cache)){$wp_object_cache=new WP_Object_Cache;}}function wp_cache_replace($key,$value,$group=\'\',$expiration=0){global $wp_object_cache;return $wp_object_cache->replace($key,$value,$group,$expiration);}function wp_cache_set($key,$value,$group=\'\',$expiration=0){global $wp_object_cache;return $wp_object_cache->set($key,$value,$group,$expiration);}function wp_cache_switch_to_blog($_blog_id){global $wp_object_cache;return $wp_object_cache->switch_to_blog($_blog_id);}function wp_cache_add_global_groups($groups){global $wp_object_cache;$wp_object_cache->add_global_groups($groups);}function wp_cache_add_non_persistent_groups($groups){global $wp_object_cache;$wp_object_cache->add_non_persistent_groups($groups);}class WP_Object_Cache{ private $redis; private $redis_connected=false; public $cache=[]; public $redis_client=null; public $global_groups=[\'blog-details\',\'blog-id-cache\',\'blog-lookup\',\'global-posts\',\'networks\',\'rss\',\'sites\',\'site-details\',\'site-lookup\',\'site-options\',\'site-transient\',\'users\',\'useremail\',\'userlogins\',\'usermeta\',\'user_meta\',\'userslugs\',]; public $ignored_groups=[\'counts\',\'plugins\']; public $global_prefix=\'\'; public $blog_prefix=\'\'; public $cache_hits=0; public $cache_misses=0; public function __construct(){global $blog_id,$table_prefix;$parameters=[\'scheme\'=>\'tcp\',\'host\'=>\'127.0.0.1\',\'port\'=>6379,];foreach([\'scheme\',\'host\',\'port\',\'path\',\'password\',\'database\'] as $setting){$constant=sprintf(\'WP_REDIS_%s\',strtoupper($setting));if(defined($constant)){$parameters[$setting]=constant($constant);}}if(defined(\'WP_REDIS_GLOBAL_GROUPS\')&&is_array(WP_REDIS_GLOBAL_GROUPS)){$this->global_groups=WP_REDIS_GLOBAL_GROUPS;}if(defined(\'WP_REDIS_IGNORED_GROUPS\')&&is_array(WP_REDIS_IGNORED_GROUPS)){$this->ignored_groups=WP_REDIS_IGNORED_GROUPS;}$client=defined(\'WP_REDIS_CLIENT\')?WP_REDIS_CLIENT:null;if(class_exists(\'Redis\')&&strcasecmp(\'predis\',$client)!==0){$client=defined(\'HHVM_VERSION\')?\'hhvm\':\'pecl\';}else {$client=\'predis\';}try{if(strcasecmp(\'hhvm\',$client)===0){$this->redis_client=sprintf(\'HHVM Extension (v%s)\',HHVM_VERSION);$this->redis=new Redis();if(strcasecmp(\'unix\',$parameters[\'scheme\'])===0){$parameters[\'host\']=\'unix://\'.$parameters[\'path\'];$parameters[\'port\']=0;}$this->redis->connect($parameters[\'host\'],$parameters[\'port\']);}if(strcasecmp(\'pecl\',$client)===0){$this->redis_client=sprintf(\'PECL Extension (v%s)\',phpversion(\'redis\'));$this->redis=new Redis();if(strcasecmp(\'unix\',$parameters[\'scheme\'])===0){$this->redis->connect($parameters[\'path\']);}else {$this->redis->connect($parameters[\'host\'],$parameters[\'port\']);}}if(strcasecmp(\'pecl\',$client)===0||strcasecmp(\'hhvm\',$client)===0){if(isset($parameters[\'password\'])){$this->redis->auth($parameters[\'password\']);}if(isset($parameters[\'database\'])){$this->redis->select($parameters[\'database\']);}}if(strcasecmp(\'predis\',$client)===0){$this->redis_client=\'Predis\';if(version_compare(PHP_VERSION,\'5.4.0\',\'<\')){ throw new Exception;}if(!class_exists(\'Predis\Client\')){$plugin_dir=defined(\'WPMU_PLUGIN_DIR\')?WPMU_PLUGIN_DIR:WP_CONTENT_DIR.\'/mu-plugins\';require_once $plugin_dir.\'/wp-nc-easywp/plugin/Http/Redis/includes/predis.php\';Predis\Autoloader::register();}$options=[];if(defined(\'WP_REDIS_CLUSTER\')){$parameters=WP_REDIS_CLUSTER;$options[\'cluster\']=\'redis\';}if(defined(\'WP_REDIS_SERVERS\')){$parameters=WP_REDIS_SERVERS;$options[\'replication\']=true;}if((defined(\'WP_REDIS_SERVERS\')||defined(\'WP_REDIS_CLUSTER\'))&&defined(\'WP_REDIS_PASSWORD\')){$options[\'parameters\'][\'password\']=WP_REDIS_PASSWORD;}$this->redis=new Predis\Client($parameters,$options);$this->redis->connect();$this->redis_client.=sprintf(\' (v%s)\',Predis\Client::VERSION);}$this->redis->ping();$this->redis_connected=true;}catch(Exception$exception){$this->ignored_groups=array_unique(array_merge($this->ignored_groups,$this->global_groups));$this->redis_connected=false;}if(!defined(\'WP_CACHE_KEY_SALT\')){define(\'WP_CACHE_KEY_SALT\',\'\');}if(function_exists(\'is_multisite\')){$this->global_prefix=(is_multisite()||defined(\'CUSTOM_USER_TABLE\')&&defined(\'CUSTOM_USER_META_TABLE\'))?\'\':$table_prefix;$this->blog_prefix=(is_multisite()?$blog_id:$table_prefix);}} public function redis_status(){return $this->redis_connected;} public function redis_instance(){return $this->redis;} public function add($key,$value,$group=\'default\',$expiration=0){return $this->add_or_replace(true,$key,$value,$group,$expiration);} public function replace($key,$value,$group=\'default\',$expiration=0){return $this->add_or_replace(false,$key,$value,$group,$expiration);} protected function add_or_replace($add,$key,$value,$group=\'default\',$expiration=0){$result=true;$derived_key=$this->build_key($key,$group);if(!in_array($group,$this->ignored_groups)&&$this->redis_status()){$exists=$this->redis->exists($derived_key);if($add==$exists){return false;}$expiration=$this->validate_expiration($expiration);if($expiration){$result=$this->parse_redis_response($this->redis->setex($derived_key,$expiration,$this->maybe_serialize($value)));}else {$result=$this->parse_redis_response($this->redis->set($derived_key,$this->maybe_serialize($value)));}}$exists=isset($this->cache[$derived_key]);if($add==$exists){return false;}if($result){$this->add_to_internal_cache($derived_key,$value);}return $result;} public function delete($key,$group=\'default\'){$result=false;$derived_key=$this->build_key($key,$group);if(isset($this->cache[$derived_key])){unset($this->cache[$derived_key]);$result=true;}if($this->redis_status()&&!in_array($group,$this->ignored_groups)){$result=$this->parse_redis_response($this->redis->del($derived_key));}if(function_exists(\'do_action\')){do_action(\'redis_object_cache_delete\',$key,$group);}return $result;} public function flush($delay=0){$delay=abs(intval($delay));if($delay){sleep($delay);}$result=false;$this->cache=[];if($this->redis_status()){$result=$this->parse_redis_response($this->redis->flushdb());if(function_exists(\'do_action\')){do_action(\'redis_object_cache_flush\',$result,$delay);}}return $result;} public function get($key,$group=\'default\',$force=false,&$found=null){$derived_key=$this->build_key($key,$group);if(isset($this->cache[$derived_key])&&!$force){$found=true;$this->cache_hits++;return is_object($this->cache[$derived_key])?clone $this->cache[$derived_key]:$this->cache[$derived_key];}elseif(in_array($group,$this->ignored_groups)||!$this->redis_status()){$found=false;$this->cache_misses++;return false;}$result=$this->redis->get($derived_key);if($result===null||$result===false){$found=false;$this->cache_misses++;return false;}else {$found=true;$this->cache_hits++;$value=$this->maybe_unserialize($result);}$this->add_to_internal_cache($derived_key,$value);$value=is_object($value)?clone $value:$value;if(function_exists(\'do_action\')){do_action(\'redis_object_cache_get\',$key,$value,$group,$force,$found);}if(function_exists(\'apply_filters\')&&function_exists(\'has_filter\')){if(has_filter(\'redis_object_cache_get\')){return apply_filters(\'redis_object_cache_get\',$value,$key,$group,$force,$found);}}return $value;} public function get_multi($groups){if(empty($groups)||!is_array($groups)){return false;}$cache=[];foreach($groups as $group=>$keys){if(in_array($group,$this->ignored_groups)||!$this->redis_status()){foreach($keys as $key){$cache[$this->build_key($key,$group)]=$this->get($key,$group);}}else {$derived_keys=[];foreach($keys as $key){$derived_keys[]=$this->build_key($key,$group);}$group_cache=$this->redis->mget($derived_keys);$group_cache=array_combine($derived_keys,$group_cache);$group_cache=array_map([$this,\'maybe_unserialize\'],$group_cache);$group_cache=array_map([$this,\'filter_redis_get_multi\'],$group_cache);$cache=array_merge($cache,$group_cache);}}foreach($cache as $key=>$value){if($value){$this->cache_hits++;$this->add_to_internal_cache($key,$value);}else {$this->cache_misses++;}}return $cache;} public function set($key,$value,$group=\'default\',$expiration=0){$result=true;$derived_key=$this->build_key($key,$group);if(!in_array($group,$this->ignored_groups)&&$this->redis_status()){$expiration=$this->validate_expiration($expiration);if($expiration){$result=$this->parse_redis_response($this->redis->setex($derived_key,$expiration,$this->maybe_serialize($value)));}else {$result=$this->parse_redis_response($this->redis->set($derived_key,$this->maybe_serialize($value)));}}if($result){$this->add_to_internal_cache($derived_key,$value);}if(function_exists(\'do_action\')){do_action(\'redis_object_cache_set\',$key,$value,$group,$expiration);}return $result;} public function increment($key,$offset=1,$group=\'default\'){$derived_key=$this->build_key($key,$group);$offset=(int)$offset;if(in_array($group,$this->ignored_groups)||!$this->redis_status()){$value=$this->get_from_internal_cache($derived_key,$group);$value+=$offset;$this->add_to_internal_cache($derived_key,$value);return $value;}$result=$this->parse_redis_response($this->redis->incrBy($derived_key,$offset));$this->add_to_internal_cache($derived_key,(int)$this->redis->get($derived_key));return $result;} public function incr($key,$offset=1,$group=\'default\'){return $this->increment($key,$offset,$group);} public function decrement($key,$offset=1,$group=\'default\'){$derived_key=$this->build_key($key,$group);$offset=(int)$offset;if(in_array($group,$this->ignored_groups)||!$this->redis_status()){$value=$this->get_from_internal_cache($derived_key,$group);$value-=$offset;$this->add_to_internal_cache($derived_key,$value);return $value;}$result=$this->parse_redis_response($this->redis->decrBy($derived_key,$offset));$this->add_to_internal_cache($derived_key,(int)$this->redis->get($derived_key));return $result;} public function stats(){?> <p> <strong>Redis Status:</strong> <?php echo $this->redis_status()?\'Connected\':\'Not Connected\';?><br/> <strong>Redis Client:</strong> <?php echo $this->redis_client;?><br/> <strong>Cache Hits:</strong> <?php echo $this->cache_hits;?><br/> <strong>Cache Misses:</strong> <?php echo $this->cache_misses;?> </p> <ul> <?php foreach($this->cache as $group=>$cache):?> <li><?php printf(\'%s - %sk\',strip_tags($group),number_format(strlen(serialize($cache))/1024,2));?></li> <?php endforeach;?> </ul><?php } public function build_key($key,$group=\'default\'){if(empty($group)){$group=\'default\';}if(in_array($group,$this->global_groups)){$prefix=$this->global_prefix;}else {$prefix=$this->blog_prefix;}return WP_CACHE_KEY_SALT."{$prefix}:{$group}:{$key}";} protected function filter_redis_get_multi($value){if(is_null($value)){$value=false;}return $value;} protected function parse_redis_response($response){if(is_bool($response)){return $response;}if(is_numeric($response)){return $response;}if(is_object($response)&&method_exists($response,\'getPayload\')){return $response->getPayload()===\'OK\';}return false;} public function add_to_internal_cache($derived_key,$value){$this->cache[$derived_key]=$value;} public function get_from_internal_cache($key,$group){$derived_key=$this->build_key($key,$group);if(isset($this->cache[$derived_key])){return $this->cache[$derived_key];}return false;} public function switch_to_blog($_blog_id){if(!function_exists(\'is_multisite\')||!is_multisite()){return false;}$this->blog_prefix=$_blog_id;return true;} public function add_global_groups($groups){$groups=(array)$groups;if($this->redis_status()){$this->global_groups=array_unique(array_merge($this->global_groups,$groups));}else {$this->ignored_groups=array_unique(array_merge($this->ignored_groups,$groups));}} public function add_non_persistent_groups($groups){$groups=(array)$groups;$this->ignored_groups=array_unique(array_merge($this->ignored_groups,$groups));} protected function validate_expiration($expiration){$expiration=(is_array($expiration)||is_object($expiration)?0:abs(intval($expiration)));if($expiration===0&&defined(\'WP_REDIS_MAXTTL\')){$expiration=intval(WP_REDIS_MAXTTL);}return $expiration;} protected function maybe_unserialize($original){if($this->is_serialized($original)){return @unserialize($original);}return $original;} protected function maybe_serialize($data){if(is_array($data)||is_object($data)){return serialize($data);}if($this->is_serialized($data,false)){return serialize($data);}return $data;} protected function is_serialized($data,$strict=true){if(!is_string($data)){return false;}$data=trim($data);if(\'N;\'==$data){return true;}if(strlen($data)<4){return false;}if(\':\'!==$data[1]){return false;}if($strict){$lastc=substr($data,-1);if(\';\'!==$lastc&&\'}\'!==$lastc){return false;}}else {$semicolon=strpos($data,\';\');$brace=strpos($data,\'}\');if(false===$semicolon&&false===$brace){return false;}if(false!==$semicolon&&$semicolon<3){return false;}if(false!==$brace&&$brace<4){return false;}}$token=$data[0];switch($token){case \'s\':if($strict){if(\'"\'!==substr($data,-2,1)){return false;}}elseif(false===strpos($data,\'"\')){return false;}case \'a\':case \'O\':return (bool)preg_match("/^{$token}:[0-9]+:/s",$data);case \'b\':case \'i\':case \'d\':$end=$strict?\'$\':\'\';return (bool)preg_match("/^{$token}:[0-9.E-]+;$end/",$data);}return false;}} endif;